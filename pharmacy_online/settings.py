"""
Django settings for pharmacy_online project.

<<<<<<< HEAD
Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
=======
Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
>>>>>>> develop
"""

import os
from pathlib import Path
<<<<<<< HEAD

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uj)n%omnmvwrqs4kpt&%ds7b3&j*x5_mpw5=n5-75tpbys5px7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'products',
    'orders',
    'inventory',
    'crispy_forms',
    'crispy_bootstrap4',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

=======
import dj_database_url
from dotenv import load_dotenv

# ===== CHARGEMENT DES VARIABLES D'ENVIRONNEMENT =====

# Chargement du fichier .env s'il existe
load_dotenv()

# ===== CONFIGURATION DES CHEMINS =====

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR pointe vers le répertoire racine du projet
BASE_DIR = Path(__file__).resolve().parent.parent


# ===== CONFIGURATION DE SÉCURITÉ =====

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Clé secrète pour le chiffrement des sessions et autres données sensibles
# Récupérée depuis les variables d'environnement
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-$nug&&@gy_d@obm@l(*=ljtqd_fsc0yp&fgjp7=jjcag^!_zie')

# SECURITY WARNING: don't run with debug turned on in production!
# Mode debug : affiche les erreurs détaillées (récupéré depuis les variables d'environnement)
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Liste des hôtes autorisés à accéder à l'application
# Récupérée depuis les variables d'environnement
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,*.onrender.com').split(',')


# ===== DÉFINITION DES APPLICATIONS =====

INSTALLED_APPS = [
    # Applications Django par défaut
    'django.contrib.admin',           # Interface d'administration
    'django.contrib.auth',            # Système d'authentification
    'django.contrib.contenttypes',    # Framework de contenu
    'django.contrib.sessions',        # Gestion des sessions
    'django.contrib.messages',        # Système de messages
    'django.contrib.staticfiles',     # Gestion des fichiers statiques
    
    # Applications locales du projet
    'accounts',                       # Gestion des comptes utilisateurs
    'products',                       # Gestion des médicaments et catégories
    'orders',                         # Gestion des commandes et panier
    'inventory',                      # Gestion des stocks et inventaires
    
    # Applications tierces
    'crispy_forms',                  # Rendu élégant des formulaires
    'crispy_bootstrap4',             # Intégration Bootstrap 4 avec Crispy Forms
]


# ===== CONFIGURATION DES MIDDLEWARES =====

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',           # Sécurité générale
    'django.contrib.sessions.middleware.SessionMiddleware',    # Gestion des sessions
    'whitenoise.middleware.WhiteNoiseMiddleware',             # Servir les fichiers statiques (production)
    'django.middleware.common.CommonMiddleware',              # Middleware commun
    'django.middleware.csrf.CsrfViewMiddleware',              # Protection CSRF
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Authentification
    'django.contrib.messages.middleware.MessageMiddleware',    # Gestion des messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # Protection clickjacking
]


# ===== CONFIGURATION DES TEMPLATES =====

>>>>>>> develop
ROOT_URLCONF = 'pharmacy_online.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
<<<<<<< HEAD
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
=======
        'DIRS': [],                    # Répertoires de templates personnalisés
        'APP_DIRS': True,             # Recherche automatique dans les apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',      # Variable request
                'django.contrib.auth.context_processors.auth',     # Variable user
                'django.contrib.messages.context_processors.messages', # Messages
>>>>>>> develop
            ],
        },
    },
]

<<<<<<< HEAD
WSGI_APPLICATION = 'pharmacy_online.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'pharmacy_db',
            'USER': 'pharmacy_user',
            'PASSWORD': 'Heinrich241',
            'HOST': 'localhost',
            'PORT': '5432',
        }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
=======
# Configuration WSGI pour le déploiement
WSGI_APPLICATION = 'pharmacy_online.wsgi.application'


# ===== CONFIGURATION DE LA BASE DE DONNÉES =====

# Configuration de la base de données avec variables d'environnement
DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.environ.get('DB_NAME', 'pharmacy_db'),
        'USER': os.environ.get('DB_USER', 'your_username'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'your_password'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Configuration de la base de données avec dj-database-url (production)
# Utilise une variable d'environnement ou une URL de connexion
# Priorité à DATABASE_URL si elle existe et est valide
database_url = os.environ.get('DATABASE_URL')
if database_url and database_url != 'postgresql://username:password@host:port/database_name':
    try:
        DATABASES = {
            'default': dj_database_url.config(
                default=database_url,
                conn_max_age=600  # Durée de vie maximale des connexions (10 minutes)
            )
        }
    except Exception:
        # En cas d'erreur de parsing, utiliser la configuration locale
        pass

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
>>>>>>> develop

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
<<<<<<< HEAD
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'
=======
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
>>>>>>> develop

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
<<<<<<< HEAD
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CRISPY_TEMPLATE_PACK = 'bootstrap4'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

AUTH_USER_MODEL = 'accounts.CustomUser'
=======
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# URL des fichiers statiques
STATIC_URL = os.environ.get('STATIC_URL', '/static/')

# Répertoire des fichiers statiques collectés
STATIC_ROOT = os.path.join(BASE_DIR, os.environ.get('STATIC_ROOT', 'staticfiles'))

# Configuration des fichiers statiques
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Configuration des médias
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')

# Répertoire des fichiers media
MEDIA_ROOT = os.path.join(BASE_DIR, os.environ.get('MEDIA_ROOT', 'media'))

# Configuration Crispy Forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# Custom user model
# AUTH_USER_MODEL = 'accounts.CustomUser'  # Commenté car le modèle CustomUser n'existe pas

# Login/Logout redirect
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===== CONFIGURATION DES MESSAGES =====

# Configuration des messages utilisateur
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# ===== CONFIGURATION DES SESSIONS =====

# Durée de vie des sessions (en secondes)
SESSION_COOKIE_AGE = 3600 * 24 * 7  # 7 jours

# ===== CONFIGURATION DES LOGS =====

# Configuration des logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ===== CONFIGURATION DE SÉCURITÉ =====

# Protection CSRF
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False').lower() == 'true'

# Session sécurisée
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False').lower() == 'true'

# ===== CONFIGURATION EMAIL =====

# Configuration email si les variables sont définies
if os.environ.get('EMAIL_HOST'):
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
else:
    # Fallback vers la console pour le développement
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ===== CONFIGURATION CACHE =====

# Configuration Redis si disponible
if os.environ.get('REDIS_URL'):
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': os.environ.get('REDIS_URL'),
        }
    }
else:
    # Cache local par défaut
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        }
    }
>>>>>>> develop
